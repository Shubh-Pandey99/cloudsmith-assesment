name: Promote Python Package

on:
  repository_dispatch:
    types: [cloudsmith-package-synced]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: ${{ vars.CLOUDSMITH_STAGING_REPO }}
  CLOUDSMITH_PRODUCTION_REPO: ${{ vars.CLOUDSMITH_PRODUCTION_REPO }}
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}

permissions:
  id-token: write
jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      - name: Query and tag the latest package fetched with 'ready-for-production'
        run: |
          PACKAGE_NAME="${{ github.event.client_payload.package_name }}"
          echo "Webhook received package name: $PACKAGE_NAME"
          echo "Fetching latest synced version of $PACKAGE_NAME from Cloudsmith..."
          PACKAGE_QUERY="name:$PACKAGE_NAME"
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)
          echo "Cloudsmith response for package query : ${PACKAGE_QUERY}"
          # Extract the identifier_perm using jq
          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
            echo "No synced package found for $PACKAGE_NAME"
            exit 1
          fi
          echo "Tagging $IDENTIFIER with 'ready-for-production'"
          cloudsmith tag add ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER ready-for-production
          echo "Found package identifier: $IDENTIFIER"
          
          # Promote package using the identifier
