name: Promote Python Package

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to promote (e.g., 0.0.1)'
        required: true
        type: string

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
  PROMOTION_TAG: 'ready-for-production'

permissions:
  contents: read

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Install Cloudsmith CLI via pip
        run: |
          python3 -m pip install --upgrade pip
          pip install --upgrade cloudsmith-cli --extra-index-url=https://dl.cloudsmith.io/public/cloudsmith/cli/python/index/

      - name: Query and tag the package with 'ready-for-production'
        env:
          CLOUDSMITH_API_KEY: ${{ env.CLOUDSMITH_API_KEY }}
        run: |
          PACKAGE_VERSION="${{ inputs.package_version }}"
          echo "Received input to promote version: $PACKAGE_VERSION"

          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "version:$PACKAGE_VERSION" -F json)

          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" == "null" ]; then
            echo "No package found with version: $PACKAGE_VERSION"
            exit 1
          fi

          echo "Tagging package $IDENTIFIER with '$PROMOTION_TAG'"
          cloudsmith tag add --yes ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER $PROMOTION_TAG

      - name: Promote all packages with 'ready-for-production' tag
        env:
          CLOUDSMITH_API_KEY: ${{ env.CLOUDSMITH_API_KEY }}
        run: |
          echo "Searching for all packages tagged with '$PROMOTION_TAG' in staging repo..."
          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} --tag $PROMOTION_TAG -F json)

          COUNT=$(echo "$PACKAGE_DATA" | jq '.data | length')
          if [ "$COUNT" -eq "0" ]; then
            echo "No packages found with tag '$PROMOTION_TAG'"
            exit 0
          fi

          echo "Found $COUNT packages. Promoting to production repo..."
          for IDENTIFIER in $(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm'); do
            echo "Promoting $IDENTIFIER"
            cloudsmith mv --yes ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
